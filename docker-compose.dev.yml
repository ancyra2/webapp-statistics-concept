services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    command: ng serve --host ${FRONTEND_HOST} --port ${FRONTEND_PORT} --configuration=development
    networks:
      - my-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MONGO_URI=${MONGO_URI}
      
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    networks:
      - my-network
    depends_on:
      - mysql
      - mongo

  mysql:
    image: mysql:8
    container_name: nestjs_mysql_db_statisticsApp
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - my-network

  mongo:
    image: mongo:latest
    container_name: nestjs_mongo_db_statisticsApp
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mysql_data:
  mongo_data:

# Dockerizing for development
# docker-compose --env-file .env.dev -f docker-compose.dev.yml up --build
